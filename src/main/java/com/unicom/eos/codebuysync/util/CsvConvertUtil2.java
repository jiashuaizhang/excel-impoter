package com.unicom.eos.codebuysync.util;

import com.google.common.io.Files;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.collections.bag.SynchronizedSortedBag;
import org.apache.commons.lang3.StringUtils;

import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.nio.charset.Charset;
import java.util.*;

/**
 * 转换CSV中换行导致的错误数据
 */
@Slf4j
public class CsvConvertUtil2 {

    private static final int COLUMN_NO = 60;
    private static final String COLUMN_SEPARATOR = "\",\"";
    private static final String CONTENT_SEPARATOR = " ";
    private static final String SOURCE_FILE_PATH = "E:\\temp\\eos-order-codebuy-sync\\意向单\\" +
            "export.csv";
    private static final String TARGET_FILE_PATH = "E:\\temp\\eos-order-codebuy-sync\\意向单\\converted2.csv";
    private static final Charset DEFAULT_CHARSET = Charset.forName("GB2312");

    private static final String orderIds = "1118112610668304,1419030935730772,1719030198048516,1919020437519911,2119021972553643,2519040284099991,3719012388830205,3719013120555279,3919032335870297,4019031469983284,4419031147396509,4419031360569795,4419031802465213,4919031801855541,5419040182713021,5819031910300371,5819031910475988,5919033072987858,6319012805996997,6519031469966650,6619021869439593,6619040388214900,6719032864364270,6819032125519833,7119032122899991,7119032546848754,7419013011491492,7419032122850511,7519032122931894,7919031577597205,8119031685963061,8219031687636200,8219032019123842,8419033070718329,8518112304667208,8819030198447408,9019032655247926,9119031803693342,9719030830286783,9719031252156532,1119020641710949,1319021972178079,1619031910295718,2119030936872625,2419032967530896,2519022586194312,2519030831899068,2519040182580195,2719031470014264,2919032122930526,3319032122946383,3819031039936738,4018112610666274,4019031361558736,4119031685929436,4819013120491996,5519030622734232,5919022176472310,5919032651985296,5919040283569863,6119012697487282,6519021972919138,7419031252604318,7519032122875283,7619021869482941,7619031040244209,8119012798726180,8219021971835891,8219030832246253,8219033071170776,8319030726052649,8618112610966666,8619031910470308,8919032019002102,9019031039999145,9419032229419119,1119031803942803,1419031688999228,1619031910678355,1719031148142382,2519020743189487,2719010844835251,2819012908006324,2919012286091456,3319030832482281,3719031910340763,4119032122984112,4219022381561715,4319031472219652,4419031910503332,4819022381571068,4819031473728223,4919031911148349,5719031040853061,5819031687631614,6019030938003819,6219032546491563,6219040283858162,6719031802047364,7119012697322890,7219011667676713,7819031039947669,8219031795740190,8318120540803942,8619022381388865,8719012908194608,8819030307900767,8819030935659314,9118112197321269,9319022586635872,9319032122938645,9619020437315013,9719032123004883,1219031253552679,1919022279550963,1919031470026043,2119021767717310,2519031472476674,2619031148099580,2719010328579864,2919032967575835,3119031362172249,3518112303094208,3519031469894884,3619022074562277,3619032122946451,3619032123146827,3619032653084957,4019031360494828,4019032125621133,4119030937691272,4419021354368394,4419030936427318,4719040388062182,4818121055471402,5019022381606709,5219012284887077,5219022381545866,5919030831394413,6619022790030805,6619033070654410,6819030832073009,6919031472208327,6919032019023870,7318112304277329,7319031470073941,7419032228552823,7519032123213856,7819032123188210,7819040180515053,8019010227238220,8019031042341618,8619031578564561,8619032017893539,9219031795350460,9819032122832108,1019030413622429,1419040388062503,1519011566510846,1519031802844090,1619031795706337,1619032016898512,2219031469889473,3219033070725883,3819032122889814,3919031363203397,4119030623081290,4119032334059202,4219032122955998,4719020436657769,4918112201204489,5418112304636698,5419020229639675,6019031801805260,6419020437492695,6419022586874911,6719030727301749,6819030936460065,6819031362188300,7319031910300993,7319032017640152,7419040283882144,8019032758264299,8219031689006489,8519030623106359,9118112304501513,9519031910294772,1019031473806929,1019031578122229,1218112093731632,1819022074989311,2519032020087876,3119032228574035,3419022687686102,3519032967762407,4019020538023533,4719031040089104,5919022381571357,5919031797110916,6118112610681359,6219031147811083,7019031801836597,7319030306198222,7519032018906632,7819031146352429,8019032440803091,8118111990703831,8919032019213705,9619032967774194,9719032123176709,9819032334655661,9919032122742756,1219030308320453,1519031469866164,2019031469899761,2419031251932518,2419031471860017,2919021972329301,2919031252772664,2919032019606486,3219031471914202,3419032123162342,3819030203939939,4019031252841163,4019031577930434,4019031801711120,4519022381455907,4619031472170370,5318112304355389,5519030413500357,6519031146893170,6619010332615094,7219032652200263,7519032334302956,7619031802639208,7619032122953889,8418112304158386,8819031470087435,9219032333800319,9319031911575427,9419031362262410,9619032333777130,9819031254695570,1019031687583923,1819022074482072,2119032122901409,2319032122946020,2319040180289002,2419031253396963,2619020231180638,2619032758229267,3019032333823955,3119032123049835,3519031910299424,3819031473601665,3819031802162909,5619020539606335,6219032123121794,7219031043426020,7519031910448195,7819032967059912,7919031796112015,8219010332925430,8319030935761460,8419031147840423,8519031796707854,8819032336485923,9119032333778163,9219032122945424,9619030307171113,9619031794559854,9819032017061935,9919013011819460,1419010333221917,1419011667649473,1619031910429729,1719011566656506,2019030517959500,2119031686831191,2319021869345964,2419010844821650,2519030936866547,2618112093747388,2719032122983559,2819040388242482,3219021971858305,3419031685897817,3519032122915018,3719020122171358,3919030935632778,3919031795124058,5519040179757421,5619032123213015,5919032759336436,6318112200125059,6319033173798344,6519031472279659,6619031794329243,7019030831360769,7219031469897264,8219032758016255,8319031910422167,8419020743750247,8419030936085370,8819011566526758,9119040179720920,9319031146907589,9619010333237881,9719012286398711,9719021561619014,9819012593525710,1219021767756433,1319022688588475,1319032758608956,1619012594278287,2219022686993464,2719011051597122,2719032655064189,2819032018451567,3119032123212339,3219032019085767,3319022789798281,3419031802414698,3419032122877163,3519032440890169,4219032122889896,4219032122924576,4419032441506049,4619012806284753,5019031469994173,5019033071594661,5219031686846591,5319031469940659,5319032122946934,5719031910334244,5919031360467123,6019020537678555,6519031469896951,6719040390340203,6819032652103379,7919031042041998,8018121467515472,8219030624116862,8319030935842518,8519012592994190,8519032124833827,8619030197433863,8619031801851075,8619032019002034,9119032334000290,9218112200084594,9219031147208353,9319032759343945,9619031578206442,9619032335045120,9919030833094846,1319030202466350,1519022586448265,1519030516117791,2019032019708352,2219031685924914,2219032017598662,2819040389109478,2919032123168172,3319012798727709,3519031910538050,3519032546492902,3919032018979566,4219032017033351,4919032123445135,5018112713457239,5019031145796602,5519040389092816,5819032123597763,6119031910348028,6319031688910304,7319020334231786,7319032122969858,7519022381604157,7918112196896271,8019012798732254,8219021971857469,8319031794707466,8419033175095176,8619030623030952,8719012697320546,9019022687651818,9318111990850903,9519012805722678,9819031472208048,9919031251950754";

    public static void main(String[] args) throws IOException {
        File source = new File(SOURCE_FILE_PATH);
        log.info("解析和转换文件开始");
        List<String> sourceLines = Files.readLines(source, DEFAULT_CHARSET);
        List<String> convertedLines = new ArrayList<>(sourceLines.size());
        Set<String> idSet = new HashSet<>(Arrays.asList(orderIds.split(",")));
        Set<String> existIds = new HashSet<>();
        StringBuilder tempLine = new StringBuilder();
        for (String line: sourceLines) {
            // 空行跳过
            if(StringUtils.isBlank(line)){
                continue;
            }
            String id = line.split(",")[0].replaceAll("\"", "");
            //正常结束
            if(idSet.contains(id)){
                convertedLines.add(line);
                existIds.add(id);
            }
        }
        sourceLines = null;
        log.info("解析和转换文件结束， 写文件开始");
        File target = new File(TARGET_FILE_PATH);
        try (BufferedWriter writer = Files.newWriter(target, DEFAULT_CHARSET)) {
            for (String line: convertedLines) {
                writer.append(line);
                writer.newLine();
            }
        }
        log.info("写文件结束");
        idSet.removeAll(existIds);
        log.info("找不到的orderId: " + idSet);
    }

}
